--- v3-schema.sorted.graphql	2018-02-24 17:17:56.000000000 +0000
+++ v4-schema.sorted.graphql	2018-02-24 17:18:01.000000000 +0000
@@ -31,7 +31,7 @@
 """
 scalar BigInt
 
-"""All input for the `createPerson` mutation."""
+"""All input for the create `Person` mutation."""
 input CreatePersonInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -43,7 +43,7 @@
   person: PersonInput!
 }
 
-"""The output of our `createPerson` mutation."""
+"""The output of our create `Person` mutation."""
 type CreatePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -54,10 +54,10 @@
   """The `Person` that was created by this mutation."""
   person: Person
 
-  """An edge for our `Person`. May be used by Relay 1."""
+  """An edge for the type. May be used by Relay 1."""
   personEdge(
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleEdge
 
   """
@@ -66,7 +66,7 @@
   query: Query
 }
 
-"""All input for the `createPost` mutation."""
+"""All input for the create `Post` mutation."""
 input CreatePostInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -78,7 +78,7 @@
   post: PostInput!
 }
 
-"""The output of our `createPost` mutation."""
+"""The output of our create `Post` mutation."""
 type CreatePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -92,10 +92,10 @@
   """The `Post` that was created by this mutation."""
   post: Post
 
-  """An edge for our `Post`. May be used by Relay 1."""
+  """An edge for the type. May be used by Relay 1."""
   postEdge(
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostsEdge
 
   """
@@ -107,7 +107,7 @@
   threadByThreadId: Thread
 }
 
-"""All input for the `createThread` mutation."""
+"""All input for the create `Thread` mutation."""
 input CreateThreadInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -119,7 +119,7 @@
   thread: ThreadInput!
 }
 
-"""The output of our `createThread` mutation."""
+"""The output of our create `Thread` mutation."""
 type CreateThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -138,10 +138,10 @@
   """The `Thread` that was created by this mutation."""
   thread: Thread
 
-  """An edge for our `Thread`. May be used by Relay 1."""
+  """An edge for the type. May be used by Relay 1."""
   threadEdge(
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
   ): ThreadsEdge
 }
 
@@ -161,8 +161,6 @@
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
-
-  """The primary unique identifier for the person."""
   id: Int!
 }
 
@@ -180,7 +178,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deletePerson` mutation."""
+"""The output of our delete `Person` mutation."""
 type DeletePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -188,8 +186,16 @@
   """
   clientMutationId: String
   deletedPersonId: ID
+
+  """The `Person` that was deleted by this mutation."""
   person: Person
 
+  """An edge for the type. May be used by Relay 1."""
+  personEdge(
+    """The method to use when ordering `Person`."""
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PeopleEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -203,8 +209,6 @@
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
-
-  """The primary key for the post."""
   id: Int!
 }
 
@@ -222,7 +226,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deletePost` mutation."""
+"""The output of our delete `Post` mutation."""
 type DeletePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -233,8 +237,16 @@
 
   """Reads a single `Person` that is related to this `Post`."""
   personByAuthorId: Person
+
+  """The `Post` that was deleted by this mutation."""
   post: Post
 
+  """An edge for the type. May be used by Relay 1."""
+  postEdge(
+    """The method to use when ordering `Post`."""
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -268,7 +280,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deleteThread` mutation."""
+"""The output of our delete `Thread` mutation."""
 type DeleteThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -284,7 +296,15 @@
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
+
+  """The `Thread` that was deleted by this mutation."""
   thread: Thread
+
+  """An edge for the type. May be used by Relay 1."""
+  threadEdge(
+    """The method to use when ordering `Thread`."""
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsEdge
 }
 
 type JwtToken {
@@ -463,10 +483,10 @@
   """
   A list of edges which contains the `Person` and cursor to aid in pagination.
   """
-  edges: [PeopleEdge]
+  edges: [PeopleEdge!]!
 
   """A list of `Person` objects."""
-  nodes: [Person!]
+  nodes: [Person]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -559,8 +579,8 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
-  ): PostsConnection
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsConnection!
 
   """Reads and enables pagination through a set of `Thread`."""
   threadsByAuthorId(
@@ -588,8 +608,8 @@
     offset: Int
 
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
-  ): ThreadsConnection
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsConnection!
   updatedAt: Datetime
 }
 
@@ -616,7 +636,7 @@
   updatedAt: Datetime
 }
 
-"""A user of the forum."""
+"""An input for mutations affecting `Person`"""
 input PersonInput {
   """A short description about the user, written by the user."""
   about: String
@@ -718,7 +738,7 @@
   updatedAt: Datetime
 }
 
-"""A forum post written by a user."""
+"""An input for mutations affecting `Post`"""
 input PostInput {
   """The id of the author user."""
   authorId: Int!
@@ -769,10 +789,10 @@
   """
   A list of edges which contains the `Post` and cursor to aid in pagination.
   """
-  edges: [PostsEdge]
+  edges: [PostsEdge!]!
 
   """A list of `Post` objects."""
-  nodes: [Post!]
+  nodes: [Post]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -839,7 +859,7 @@
     offset: Int
 
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleConnection
 
   """Reads and enables pagination through a set of `Post`."""
@@ -868,7 +888,7 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostsConnection
 
   """Reads and enables pagination through a set of `Thread`."""
@@ -897,7 +917,7 @@
     offset: Int
 
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
   ): ThreadsConnection
 
   """Gets the person who was identified by our JWT."""
@@ -919,20 +939,14 @@
     """The globally unique `ID` to be used in selecting a single `Person`."""
     nodeId: ID!
   ): Person
-  personById(
-    """The primary unique identifier for the person."""
-    id: Int!
-  ): Person
+  personById(id: Int!): Person
 
   """Reads a single `Post` using its globally unique `ID`."""
   post(
     """The globally unique `ID` to be used in selecting a single `Post`."""
     nodeId: ID!
   ): Post
-  postById(
-    """The primary key for the post."""
-    id: Int!
-  ): Post
+  postById(id: Int!): Post
 
   """
   Exposes the root query type nested one level down. This is helpful for Relay 1
@@ -959,11 +973,8 @@
     based pagination. May not be used with `last`.
     """
     offset: Int
-
-    """The method to use when ordering `Post`."""
-    orderBy: SearchPostsOrderBy = NATURAL
     search: String
-  ): SearchPostsConnection
+  ): PostsConnection!
 
   """Reads a single `Thread` using its globally unique `ID`."""
   thread(
@@ -998,7 +1009,7 @@
   """An edge for the type. May be used by Relay 1."""
   personEdge(
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleEdge
 
   """
@@ -1007,37 +1018,6 @@
   query: Query
 }
 
-"""A connection to a list of `Post` values."""
-type SearchPostsConnection {
-  """
-  A list of edges which contains the `Post` and cursor to aid in pagination.
-  """
-  edges: [SearchPostsEdge]
-
-  """A list of `Post` objects."""
-  nodes: [Post]
-
-  """Information to aid in pagination."""
-  pageInfo: PageInfo!
-
-  """The count of *all* `Post` you could get from the connection."""
-  totalCount: Int
-}
-
-"""A `Post` edge in the connection."""
-type SearchPostsEdge {
-  """A cursor for use in pagination."""
-  cursor: Cursor
-
-  """The `Post` at the end of the edge."""
-  node: Post
-}
-
-"""Methods to use when ordering `Post`."""
-enum SearchPostsOrderBy {
-  NATURAL
-}
-
 type Thread implements Node {
   authorId: Int!
   body: String
@@ -1079,8 +1059,8 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
-  ): PostsConnection
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsConnection!
   title: String!
   topic: Topic
 }
@@ -1108,6 +1088,7 @@
   topic: Topic
 }
 
+"""An input for mutations affecting `Thread`"""
 input ThreadInput {
   authorId: Int!
   body: String
@@ -1134,10 +1115,10 @@
   """
   A list of edges which contains the `Thread` and cursor to aid in pagination.
   """
-  edges: [ThreadsEdge]
+  edges: [ThreadsEdge!]!
 
   """A list of `Thread` objects."""
-  nodes: [Thread!]
+  nodes: [Thread]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -1188,12 +1169,10 @@
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
-
-  """The primary unique identifier for the person."""
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Person` identified by our unique key.
+  An object where the defined keys will be set on the `Person` being updated.
   """
   personPatch: PersonPatch!
 }
@@ -1212,20 +1191,28 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Person` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Person` being updated.
   """
   personPatch: PersonPatch!
 }
 
-"""The output of our `updatePerson` mutation."""
+"""The output of our update `Person` mutation."""
 type UpdatePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
+
+  """The `Person` that was updated by this mutation."""
   person: Person
 
+  """An edge for the type. May be used by Relay 1."""
+  personEdge(
+    """The method to use when ordering `Person`."""
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PeopleEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -1239,12 +1226,10 @@
   payload verbatim. May be used to track mutations by the client.
   """
   clientMutationId: String
-
-  """The primary key for the post."""
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Post` identified by our unique key.
+  An object where the defined keys will be set on the `Post` being updated.
   """
   postPatch: PostPatch!
 }
@@ -1263,12 +1248,12 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Post` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Post` being updated.
   """
   postPatch: PostPatch!
 }
 
-"""The output of our `updatePost` mutation."""
+"""The output of our update `Post` mutation."""
 type UpdatePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -1278,8 +1263,16 @@
 
   """Reads a single `Person` that is related to this `Post`."""
   personByAuthorId: Person
+
+  """The `Post` that was updated by this mutation."""
   post: Post
 
+  """An edge for the type. May be used by Relay 1."""
+  postEdge(
+    """The method to use when ordering `Post`."""
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -1299,7 +1292,7 @@
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Thread` identified by our unique key.
+  An object where the defined keys will be set on the `Thread` being updated.
   """
   threadPatch: ThreadPatch!
 }
@@ -1318,12 +1311,12 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Thread` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Thread` being updated.
   """
   threadPatch: ThreadPatch!
 }
 
-"""The output of our `updateThread` mutation."""
+"""The output of our update `Thread` mutation."""
 type UpdateThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -1338,6 +1331,14 @@
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
+
+  """The `Thread` that was updated by this mutation."""
   thread: Thread
+
+  """An edge for the type. May be used by Relay 1."""
+  threadEdge(
+    """The method to use when ordering `Thread`."""
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsEdge
 }
 
