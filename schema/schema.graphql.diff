--- schema/v3-schema.sorted.graphql	2018-02-27 21:03:51.000000000 +0000
+++ schema/v4-schema.sorted.graphql	2018-02-27 21:03:51.000000000 +0000
@@ -31,7 +31,7 @@
 """
 scalar BigInt
 
-"""All input for the `createEmoji` mutation."""
+"""All input for the create `Emoji` mutation."""
 input CreateEmojiInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -43,7 +43,7 @@
   emoji: EmojiInput!
 }
 
-"""The output of our `createEmoji` mutation."""
+"""The output of our create `Emoji` mutation."""
 type CreateEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -57,7 +57,7 @@
   """An edge for our `Emoji`. May be used by Relay 1."""
   emojiEdge(
     """The method to use when ordering `Emoji`."""
-    orderBy: EmojisOrderBy = PRIMARY_KEY_ASC
+    orderBy: [EmojisOrderBy!] = [PRIMARY_KEY_ASC]
   ): EmojisEdge
 
   """
@@ -66,7 +66,7 @@
   query: Query
 }
 
-"""All input for the `createPerson` mutation."""
+"""All input for the create `Person` mutation."""
 input CreatePersonInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -78,7 +78,7 @@
   person: PersonInput!
 }
 
-"""The output of our `createPerson` mutation."""
+"""The output of our create `Person` mutation."""
 type CreatePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -92,7 +92,7 @@
   """An edge for our `Person`. May be used by Relay 1."""
   personEdge(
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleEdge
 
   """
@@ -101,7 +101,7 @@
   query: Query
 }
 
-"""All input for the `createPostEmoji` mutation."""
+"""All input for the create `PostEmoji` mutation."""
 input CreatePostEmojiInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -113,7 +113,7 @@
   postEmoji: PostEmojiInput!
 }
 
-"""The output of our `createPostEmoji` mutation."""
+"""The output of our create `PostEmoji` mutation."""
 type CreatePostEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -136,7 +136,7 @@
   """An edge for our `PostEmoji`. May be used by Relay 1."""
   postEmojiEdge(
     """The method to use when ordering `PostEmoji`."""
-    orderBy: PostEmojisOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostEmojisEdge
 
   """
@@ -145,7 +145,7 @@
   query: Query
 }
 
-"""All input for the `createPost` mutation."""
+"""All input for the create `Post` mutation."""
 input CreatePostInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -157,7 +157,7 @@
   post: PostInput!
 }
 
-"""The output of our `createPost` mutation."""
+"""The output of our create `Post` mutation."""
 type CreatePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -174,7 +174,7 @@
   """An edge for our `Post`. May be used by Relay 1."""
   postEdge(
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostsEdge
 
   """
@@ -186,7 +186,7 @@
   threadByThreadId: Thread
 }
 
-"""All input for the `createThread` mutation."""
+"""All input for the create `Thread` mutation."""
 input CreateThreadInput {
   """
   An arbitrary string value with no semantic meaning. Will be included in the
@@ -198,7 +198,7 @@
   thread: ThreadInput!
 }
 
-"""The output of our `createThread` mutation."""
+"""The output of our create `Thread` mutation."""
 type CreateThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -220,7 +220,7 @@
   """An edge for our `Thread`. May be used by Relay 1."""
   threadEdge(
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
   ): ThreadsEdge
 }
 
@@ -258,7 +258,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deleteEmoji` mutation."""
+"""The output of our delete `Emoji` mutation."""
 type DeleteEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -266,8 +266,16 @@
   """
   clientMutationId: String
   deletedEmojiId: ID
+
+  """The `Emoji` that was deleted by this mutation."""
   emoji: Emoji
 
+  """An edge for our `Emoji`. May be used by Relay 1."""
+  emojiEdge(
+    """The method to use when ordering `Emoji`."""
+    orderBy: [EmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): EmojisEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -300,7 +308,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deletePerson` mutation."""
+"""The output of our delete `Person` mutation."""
 type DeletePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -308,8 +316,16 @@
   """
   clientMutationId: String
   deletedPersonId: ID
+
+  """The `Person` that was deleted by this mutation."""
   person: Person
 
+  """An edge for our `Person`. May be used by Relay 1."""
+  personEdge(
+    """The method to use when ordering `Person`."""
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PeopleEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -356,7 +372,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deletePostEmoji` mutation."""
+"""The output of our delete `PostEmoji` mutation."""
 type DeletePostEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -373,8 +389,16 @@
 
   """Reads a single `Post` that is related to this `PostEmoji`."""
   postByPostId: Post
+
+  """The `PostEmoji` that was deleted by this mutation."""
   postEmoji: PostEmoji
 
+  """An edge for our `PostEmoji`. May be used by Relay 1."""
+  postEmojiEdge(
+    """The method to use when ordering `PostEmoji`."""
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostEmojisEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -395,7 +419,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deletePost` mutation."""
+"""The output of our delete `Post` mutation."""
 type DeletePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -406,8 +430,16 @@
 
   """Reads a single `Person` that is related to this `Post`."""
   personByAuthorId: Person
+
+  """The `Post` that was deleted by this mutation."""
   post: Post
 
+  """An edge for our `Post`. May be used by Relay 1."""
+  postEdge(
+    """The method to use when ordering `Post`."""
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -441,7 +473,7 @@
   nodeId: ID!
 }
 
-"""The output of our `deleteThread` mutation."""
+"""The output of our delete `Thread` mutation."""
 type DeleteThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -457,7 +489,15 @@
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
+
+  """The `Thread` that was deleted by this mutation."""
   thread: Thread
+
+  """An edge for our `Thread`. May be used by Relay 1."""
+  threadEdge(
+    """The method to use when ordering `Thread`."""
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsEdge
 }
 
 type Emoji implements Node {
@@ -494,8 +534,8 @@
     offset: Int
 
     """The method to use when ordering `PostEmoji`."""
-    orderBy: PostEmojisOrderBy = PRIMARY_KEY_ASC
-  ): PostEmojisConnection
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostEmojisConnection!
   url: String!
 }
 
@@ -510,6 +550,7 @@
   url: String
 }
 
+"""An input for mutations affecting `Emoji`"""
 input EmojiInput {
   alias: String!
   url: String!
@@ -528,10 +569,10 @@
   """
   A list of edges which contains the `Emoji` and cursor to aid in pagination.
   """
-  edges: [EmojisEdge]
+  edges: [EmojisEdge!]!
 
   """A list of `Emoji` objects."""
-  nodes: [Emoji!]
+  nodes: [Emoji!]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -563,7 +604,7 @@
 """
 A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 """
-scalar Json
+scalar JSON
 
 type JwtToken {
   personId: Int
@@ -823,10 +864,10 @@
   """
   A list of edges which contains the `Person` and cursor to aid in pagination.
   """
-  edges: [PeopleEdge]
+  edges: [PeopleEdge!]!
 
   """A list of `Person` objects."""
-  nodes: [Person!]
+  nodes: [Person!]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -919,8 +960,8 @@
     offset: Int
 
     """The method to use when ordering `PostEmoji`."""
-    orderBy: PostEmojisOrderBy = PRIMARY_KEY_ASC
-  ): PostEmojisConnection
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostEmojisConnection!
 
   """Reads and enables pagination through a set of `Post`."""
   postsByAuthorId(
@@ -948,8 +989,8 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
-  ): PostsConnection
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsConnection!
 
   """Reads and enables pagination through a set of `Thread`."""
   threadsByAuthorId(
@@ -977,8 +1018,8 @@
     offset: Int
 
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
-  ): ThreadsConnection
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsConnection!
   updatedAt: Datetime
 }
 
@@ -1005,7 +1046,7 @@
   updatedAt: Datetime
 }
 
-"""A user of the forum."""
+"""An input for mutations affecting `Person`"""
 input PersonInput {
   """A short description about the user, written by the user."""
   about: String
@@ -1045,37 +1086,6 @@
   updatedAt: Datetime
 }
 
-"""A connection to a list of `Thread` values."""
-type PopularThreadsConnection {
-  """
-  A list of edges which contains the `Thread` and cursor to aid in pagination.
-  """
-  edges: [PopularThreadsEdge]
-
-  """A list of `Thread` objects."""
-  nodes: [Thread]
-
-  """Information to aid in pagination."""
-  pageInfo: PageInfo!
-
-  """The count of *all* `Thread` you could get from the connection."""
-  totalCount: Int
-}
-
-"""A `Thread` edge in the connection."""
-type PopularThreadsEdge {
-  """A cursor for use in pagination."""
-  cursor: Cursor
-
-  """The `Thread` at the end of the edge."""
-  node: Thread
-}
-
-"""Methods to use when ordering `Thread`."""
-enum PopularThreadsOrderBy {
-  NATURAL
-}
-
 """A forum post written by a user."""
 type Post implements Node {
   """The id of the author user."""
@@ -1086,7 +1096,7 @@
 
   """The time this post was created."""
   createdAt: Datetime
-  emojiSummary: Json
+  emojiSummary: JSON
 
   """The title written by the user."""
   headline: String!
@@ -1128,8 +1138,8 @@
     offset: Int
 
     """The method to use when ordering `PostEmoji`."""
-    orderBy: PostEmojisOrderBy = PRIMARY_KEY_ASC
-  ): PostEmojisConnection
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostEmojisConnection!
 
   """A truncated version of the body for summaries."""
   summary(length: Int, omission: String): String
@@ -1207,6 +1217,7 @@
   postId: Int
 }
 
+"""An input for mutations affecting `PostEmoji`"""
 input PostEmojiInput {
   createdAt: Datetime
   emojiAlias: String!
@@ -1229,10 +1240,10 @@
   """
   A list of edges which contains the `PostEmoji` and cursor to aid in pagination.
   """
-  edges: [PostEmojisEdge]
+  edges: [PostEmojisEdge!]!
 
   """A list of `PostEmoji` objects."""
-  nodes: [PostEmoji!]
+  nodes: [PostEmoji!]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -1265,7 +1276,7 @@
   PRIMARY_KEY_DESC
 }
 
-"""A forum post written by a user."""
+"""An input for mutations affecting `Post`"""
 input PostInput {
   """The id of the author user."""
   authorId: Int!
@@ -1316,10 +1327,10 @@
   """
   A list of edges which contains the `Post` and cursor to aid in pagination.
   """
-  edges: [PostsEdge]
+  edges: [PostsEdge!]!
 
   """A list of `Post` objects."""
-  nodes: [Post!]
+  nodes: [Post!]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -1386,7 +1397,7 @@
     offset: Int
 
     """The method to use when ordering `Emoji`."""
-    orderBy: EmojisOrderBy = PRIMARY_KEY_ASC
+    orderBy: [EmojisOrderBy!] = [PRIMARY_KEY_ASC]
   ): EmojisConnection
 
   """Reads and enables pagination through a set of `Person`."""
@@ -1415,7 +1426,7 @@
     offset: Int
 
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleConnection
 
   """Reads and enables pagination through a set of `PostEmoji`."""
@@ -1444,7 +1455,7 @@
     offset: Int
 
     """The method to use when ordering `PostEmoji`."""
-    orderBy: PostEmojisOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostEmojisConnection
 
   """Reads and enables pagination through a set of `Post`."""
@@ -1473,7 +1484,7 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
   ): PostsConnection
 
   """Reads and enables pagination through a set of `Thread`."""
@@ -1502,7 +1513,7 @@
     offset: Int
 
     """The method to use when ordering `Thread`."""
-    orderBy: ThreadsOrderBy = PRIMARY_KEY_ASC
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
   ): ThreadsConnection
 
   """Gets the person who was identified by our JWT."""
@@ -1531,10 +1542,7 @@
     """The globally unique `ID` to be used in selecting a single `Person`."""
     nodeId: ID!
   ): Person
-  personById(
-    """The primary unique identifier for the person."""
-    id: Int!
-  ): Person
+  personById(id: Int!): Person
 
   """Reads and enables pagination through a set of `Thread`."""
   popularThreads(
@@ -1555,20 +1563,14 @@
     based pagination. May not be used with `last`.
     """
     offset: Int
-
-    """The method to use when ordering `Thread`."""
-    orderBy: PopularThreadsOrderBy = NATURAL
-  ): PopularThreadsConnection
+  ): ThreadsConnection!
 
   """Reads a single `Post` using its globally unique `ID`."""
   post(
     """The globally unique `ID` to be used in selecting a single `Post`."""
     nodeId: ID!
   ): Post
-  postById(
-    """The primary key for the post."""
-    id: Int!
-  ): Post
+  postById(id: Int!): Post
 
   """Reads a single `PostEmoji` using its globally unique `ID`."""
   postEmoji(
@@ -1604,11 +1606,8 @@
     based pagination. May not be used with `last`.
     """
     offset: Int
-
-    """The method to use when ordering `Post`."""
-    orderBy: SearchPostsOrderBy = NATURAL
     search: String
-  ): SearchPostsConnection
+  ): PostsConnection!
 
   """Reads a single `Thread` using its globally unique `ID`."""
   thread(
@@ -1640,10 +1639,10 @@
   clientMutationId: String
   person: Person
 
-  """An edge for the type. May be used by Relay 1."""
+  """An edge for our `Person`. May be used by Relay 1."""
   personEdge(
     """The method to use when ordering `Person`."""
-    orderBy: PeopleOrderBy = PRIMARY_KEY_ASC
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
   ): PeopleEdge
 
   """
@@ -1652,37 +1651,6 @@
   query: Query
 }
 
-"""A connection to a list of `Post` values."""
-type SearchPostsConnection {
-  """
-  A list of edges which contains the `Post` and cursor to aid in pagination.
-  """
-  edges: [SearchPostsEdge]
-
-  """A list of `Post` objects."""
-  nodes: [Post]
-
-  """Information to aid in pagination."""
-  pageInfo: PageInfo!
-
-  """The count of *all* `Post` you could get from the connection."""
-  totalCount: Int
-}
-
-"""A `Post` edge in the connection."""
-type SearchPostsEdge {
-  """A cursor for use in pagination."""
-  cursor: Cursor
-
-  """The `Post` at the end of the edge."""
-  node: Post
-}
-
-"""Methods to use when ordering `Post`."""
-enum SearchPostsOrderBy {
-  NATURAL
-}
-
 type Thread implements Node {
   authorId: Int!
   body: String
@@ -1724,8 +1692,8 @@
     offset: Int
 
     """The method to use when ordering `Post`."""
-    orderBy: PostsOrderBy = PRIMARY_KEY_ASC
-  ): PostsConnection
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsConnection!
   title: String!
   topic: Topic
 }
@@ -1753,6 +1721,7 @@
   topic: Topic
 }
 
+"""An input for mutations affecting `Thread`"""
 input ThreadInput {
   authorId: Int!
   body: String
@@ -1779,10 +1748,10 @@
   """
   A list of edges which contains the `Thread` and cursor to aid in pagination.
   """
-  edges: [ThreadsEdge]
+  edges: [ThreadsEdge!]!
 
   """A list of `Thread` objects."""
-  nodes: [Thread!]
+  nodes: [Thread!]!
 
   """Information to aid in pagination."""
   pageInfo: PageInfo!
@@ -1837,7 +1806,7 @@
   clientMutationId: String
 
   """
-  An object where the defined keys will be set on the `Emoji` identified by our unique key.
+  An object where the defined keys will be set on the `Emoji` being updated.
   """
   emojiPatch: EmojiPatch!
 }
@@ -1851,7 +1820,7 @@
   clientMutationId: String
 
   """
-  An object where the defined keys will be set on the `Emoji` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Emoji` being updated.
   """
   emojiPatch: EmojiPatch!
 
@@ -1861,15 +1830,23 @@
   nodeId: ID!
 }
 
-"""The output of our `updateEmoji` mutation."""
+"""The output of our update `Emoji` mutation."""
 type UpdateEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
+
+  """The `Emoji` that was updated by this mutation."""
   emoji: Emoji
 
+  """An edge for our `Emoji`. May be used by Relay 1."""
+  emojiEdge(
+    """The method to use when ordering `Emoji`."""
+    orderBy: [EmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): EmojisEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -1888,7 +1865,7 @@
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Person` identified by our unique key.
+  An object where the defined keys will be set on the `Person` being updated.
   """
   personPatch: PersonPatch!
 }
@@ -1907,20 +1884,28 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Person` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Person` being updated.
   """
   personPatch: PersonPatch!
 }
 
-"""The output of our `updatePerson` mutation."""
+"""The output of our update `Person` mutation."""
 type UpdatePersonPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
   unchanged and unused. May be used by a client to track mutations.
   """
   clientMutationId: String
+
+  """The `Person` that was updated by this mutation."""
   person: Person
 
+  """An edge for our `Person`. May be used by Relay 1."""
+  personEdge(
+    """The method to use when ordering `Person`."""
+    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PeopleEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -1939,7 +1924,7 @@
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Post` identified by our unique key.
+  An object where the defined keys will be set on the `Post` being updated.
   """
   postPatch: PostPatch!
 }
@@ -1957,7 +1942,7 @@
   personId: Int!
 
   """
-  An object where the defined keys will be set on the `PostEmoji` identified by our unique key.
+  An object where the defined keys will be set on the `PostEmoji` being updated.
   """
   postEmojiPatch: PostEmojiPatch!
   postId: Int!
@@ -1977,12 +1962,12 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `PostEmoji` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `PostEmoji` being updated.
   """
   postEmojiPatch: PostEmojiPatch!
 }
 
-"""The output of our `updatePostEmoji` mutation."""
+"""The output of our update `PostEmoji` mutation."""
 type UpdatePostEmojiPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -1998,8 +1983,16 @@
 
   """Reads a single `Post` that is related to this `PostEmoji`."""
   postByPostId: Post
+
+  """The `PostEmoji` that was updated by this mutation."""
   postEmoji: PostEmoji
 
+  """An edge for our `PostEmoji`. May be used by Relay 1."""
+  postEmojiEdge(
+    """The method to use when ordering `PostEmoji`."""
+    orderBy: [PostEmojisOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostEmojisEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -2020,12 +2013,12 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Post` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Post` being updated.
   """
   postPatch: PostPatch!
 }
 
-"""The output of our `updatePost` mutation."""
+"""The output of our update `Post` mutation."""
 type UpdatePostPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -2035,8 +2028,16 @@
 
   """Reads a single `Person` that is related to this `Post`."""
   personByAuthorId: Person
+
+  """The `Post` that was updated by this mutation."""
   post: Post
 
+  """An edge for our `Post`. May be used by Relay 1."""
+  postEdge(
+    """The method to use when ordering `Post`."""
+    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): PostsEdge
+
   """
   Our root query field type. Allows us to run any query from our mutation payload.
   """
@@ -2056,7 +2057,7 @@
   id: Int!
 
   """
-  An object where the defined keys will be set on the `Thread` identified by our unique key.
+  An object where the defined keys will be set on the `Thread` being updated.
   """
   threadPatch: ThreadPatch!
 }
@@ -2075,12 +2076,12 @@
   nodeId: ID!
 
   """
-  An object where the defined keys will be set on the `Thread` identified by our globally unique `ID`.
+  An object where the defined keys will be set on the `Thread` being updated.
   """
   threadPatch: ThreadPatch!
 }
 
-"""The output of our `updateThread` mutation."""
+"""The output of our update `Thread` mutation."""
 type UpdateThreadPayload {
   """
   The exact same `clientMutationId` that was provided in the mutation input,
@@ -2095,6 +2096,14 @@
   Our root query field type. Allows us to run any query from our mutation payload.
   """
   query: Query
+
+  """The `Thread` that was updated by this mutation."""
   thread: Thread
+
+  """An edge for our `Thread`. May be used by Relay 1."""
+  threadEdge(
+    """The method to use when ordering `Thread`."""
+    orderBy: [ThreadsOrderBy!] = [PRIMARY_KEY_ASC]
+  ): ThreadsEdge
 }
 
